

echo  | base64 --decode | sudo tee /usr/bin/mib2zabbix.pl
sudo chmod +x /usr/bin/mib2zabbix.pl

mkdir TEMPERATUREALERT
cd TEMPERATUREALERT

echo ClRFTVBFUkFUVVJFQUxFUlQtTUlCIERFRklOSVRJT05TIDo6PSBCRUdJTgoKSU1QT1JUUwoJTU9EVUxFLUlERU5USVRZLAogICAgICAgIE9CSkVDVC1UWVBFCiAgICAgICAgICAgICAgICBGUk9NIFNOTVB2Mi1TTUkKCURpc3BsYXlTdHJpbmcKICAgICAgICAgICAgICAgIEZST00gU05NUHYyLVRDCgllbnRlcnByaXNlcwoJCUZST00gUkZDMTE1NS1TTUkKCVRSQVAtVFlQRSAgICAgICAgICAgICAgIAoJCUZST00gUkZDLTEyMTU7Cgp0YU1JQiBNT0RVTEUtSURFTlRJVFkKICAgICAgICBMQVNULVVQREFURUQgIjA2MTAzMTEyMDBaIiAgICAgIAogICAgICAgIE9SR0FOSVpBVElPTiAiVGVtcGVyYXR1cmVAbGVydCIKICAgICAgICBDT05UQUNULUlORk8KICAgICAgICAgICAgICAgICJIYXJyeSBTY2hlY2h0ZXIKCiAgICAgICAgICAgICAgICBQb3N0YWw6IDMwNTkgQ29ubmVjdGljdXQgQXZlLCAjODExNQoJCQlXYXNoaW5ndG9uLCBEQyAgMjAwMDgKCiAgICAgICAgICAgICAgICBFLW1haWw6IGluZm9AdGVtcGVyYXR1cmVhbGVydC5jb20iCiAgICAgICAgREVTQ1JJUFRJT04gCgkJIlRoZSBUZW1wZXJhdHVyZUBsZXJ0IFNOTVAgTUlCLiIKICAgICAgICBSRVZJU0lPTiAiMDYxMDMxMTIwMFoiCglERVNDUklQVElPTgoJCSJDdXJyZW50IHJldmlzaW9uLiIKCTo6PSB7IGVudGVycHJpc2VzIDI3Mjk3IH0KCgp0YVRyYXBzCQlPQkpFQ1QgSURFTlRJRklFUiA6Oj0geyB0YU1JQiAwIH0KdGFTZXJ2aWNlIAlPQkpFQ1QgSURFTlRJRklFUiA6Oj0geyB0YU1JQiAxIH0KCnRhRGV2aWNlSW5kZXggT0JKRUNULVRZUEUKICAgICAgICBTWU5UQVggIERpc3BsYXlTdHJpbmcKICAgICAgICBNQVgtQUNDRVNTIHJlYWQtb25seQogICAgICAgIFNUQVRVUyBjdXJyZW50CiAgICAgICAgREVTQ1JJUFRJT04KICAgICAgICAgICAgICAgICJDT00gUG9ydCBvZiB0aGUgZGV2aWNlIgogOjo9IHsgdGFTZXJ2aWNlIDEgfQoKdGFUZW1wZXJhdHVyZSBPQkpFQ1QtVFlQRQogICAgICAgIFNZTlRBWCAgRGlzcGxheVN0cmluZwogICAgICAgIE1BWC1BQ0NFU1MgcmVhZC1vbmx5CiAgICAgICAgU1RBVFVTIGN1cnJlbnQKICAgICAgICBERVNDUklQVElPTgogICAgICAgICAgICAgICAgIlRoZSB0ZW1wZXJhdHVyZSBwaWNrZWQgdXAgYnkgdGhlIG1vbml0b3IuIgogOjo9IHsgdGFTZXJ2aWNlIDIgfQoKdGFMYXN0Q2hlY2sgT0JKRUNULVRZUEUKICAgICAgICBTWU5UQVggIERpc3BsYXlTdHJpbmcKICAgICAgICBNQVgtQUNDRVNTIHJlYWQtb25seQogICAgICAgIFNUQVRVUyBjdXJyZW50CiAgICAgICAgREVTQ1JJUFRJT04KICAgICAgICAgICAgICAgICJUaGUgZGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBtb25pdG9yIGNoZWNrZWQgdGhlIHRlbXBlcmF0dXJlLiIKIDo6PSB7IHRhU2VydmljZSAzIH0KCnRhTm9ybWFsIE5PVElGSUNBVElPTi1UWVBFCiAgICAgT0JKRUNUUyAgICAgICAgICAgeyB0YURldmljZUluZGV4LCB0YVRlbXBlcmF0dXJlLCB0YUxhc3RDaGVjayB9CiAgICAgU1RBVFVTICAgICAgICAgICAgY3VycmVudAogICAgIERFU0NSSVBUSU9OCiAgICAgICAgICAiRmlyZWQgd2hlbiB0aGUgYWxhcm0gaXMgcmVhZC4iCiAgICAgOjo9IHsgdGFUcmFwcyAxIH0KCnRhSGlnaEFsYXJtIE5PVElGSUNBVElPTi1UWVBFCiAgICAgT0JKRUNUUyAgICAgICAgICAgeyB0YURldmljZUluZGV4LCB0YVRlbXBlcmF0dXJlLCB0YUxhc3RDaGVjayB9CiAgICAgU1RBVFVTICAgICAgICAgICAgY3VycmVudAogICAgIERFU0NSSVBUSU9OCiAgICAgICAgICAiRmlyZWQgd2hlbiB0aGUgaGlnaCBhbGFybSBpcyB0cmlwcGVkLiIKICAgICA6Oj0geyB0YVRyYXBzIDIgfQoKdGFMb3dBbGFybSBOT1RJRklDQVRJT04tVFlQRQogICAgIE9CSkVDVFMgICAgICAgICAgIHsgdGFEZXZpY2VJbmRleCwgdGFUZW1wZXJhdHVyZSwgdGFMYXN0Q2hlY2sgfQogICAgIFNUQVRVUyAgICAgICAgICAgIGN1cnJlbnQKICAgICBERVNDUklQVElPTgogICAgICAgICAgIkZpcmVkIHdoZW4gdGhlIGxvdyBhbGFybSBpcyB0cmlwcGVkLiIKICAgICA6Oj0geyB0YVRyYXBzIDMgfQoKdGFTaHV0ZG93biBOT1RJRklDQVRJT04tVFlQRQogICAgIFNUQVRVUyAgICAgICAgICAgIGN1cnJlbnQKICAgICBERVNDUklQVElPTgogICAgICAgICAgIkZpcmVkIHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIHNodXR0aW5nIGRvd24gdGhlIHNlcnZlci4iCiAgICAgOjo9IHsgdGFUcmFwcyA0IH0KCkVORAo= | base64 --decode > TEMPERATUREALERT-MIB


snmptranslate -Tz -m ./TEMPERATUREALERT-MIB

# note down '1.3.6.1.4.1.27297'

snmptranslate -Tz -m ./TEMPERATUREALERT-MIB | mib2zabbix.pl -o 1.3.6.1.4.1.27297 -f TEMPERATUREALERT-MIB.xml -N TEMPERATUREALERT-MIB




